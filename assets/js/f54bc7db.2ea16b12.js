"use strict";(self.webpackChunkapuntes=self.webpackChunkapuntes||[]).push([[391],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>m});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?t.createElement(k,l(l({ref:a},u),{},{components:n})):t.createElement(k,l({ref:a},u))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7676:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const i={sidebar_position:5},l="Estructuras de Control",o={unversionedId:"primeros-pasos/estructuras-de-control",id:"primeros-pasos/estructuras-de-control",title:"Estructuras de Control",description:"Terminolog\xeda",source:"@site/docs/primeros-pasos/estructuras-de-control.md",sourceDirName:"primeros-pasos",slug:"/primeros-pasos/estructuras-de-control",permalink:"/primeros-pasos/estructuras-de-control",draft:!1,editUrl:"https://github.com/algo1camejo/apuntes/docs/primeros-pasos/estructuras-de-control.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Operadores",permalink:"/primeros-pasos/operadores"},next:{title:"Buenas pr\xe1cticas de programaci\xf3n",permalink:"/primeros-pasos/buenas-practicas"}},s={},c=[{value:"Terminolog\xeda",id:"terminolog\xeda",level:2},{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Estructuras de control selectivas",id:"estructuras-de-control-selectivas",level:2},{value:"if",id:"if",level:3},{value:"if...else",id:"ifelse",level:3},{value:"Escalera if...else",id:"escalera-ifelse",level:3},{value:"if anidado",id:"if-anidado",level:3},{value:"switch...case",id:"switchcase",level:3},{value:"Estructuras de control iterativas",id:"estructuras-de-control-iterativas",level:2},{value:"while loop",id:"while-loop",level:3},{value:"do...while loop",id:"dowhile-loop",level:3},{value:"for loop",id:"for-loop",level:3}],u={toc:c};function p(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"estructuras-de-control"},"Estructuras de Control"),(0,r.kt)("h2",{id:"terminolog\xeda"},"Terminolog\xeda"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"T\xe9rmino"),(0,r.kt)("th",{parentName:"tr",align:null},"Definici\xf3n"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Programa")),(0,r.kt)("td",{parentName:"tr",align:null},"Serie de instrucciones que permite realizar una determinada                   tarea en una computadora. Se podr\xeda pensar como una receta.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Secuencial")),(0,r.kt)("td",{parentName:"tr",align:null},"Cuando las instrucciones se ejecutan una despu\xe9s de la                        otra, en el orden en el que est\xe1n escritas.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Flujo de Control")),(0,r.kt)("td",{parentName:"tr",align:null},"Orden en el que se ejecutan las instrucciones de un                           programa.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Bloque de c\xf3digo")),(0,r.kt)("td",{parentName:"tr",align:null},"Agrupaci\xf3n de acciones o declaraciones. Si el                                 bloque se ejecuta, todas las acciones dentro de \xe9l                            tambi\xe9n lo har\xe1n.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Expresi\xf3n booleana")),(0,r.kt)("td",{parentName:"tr",align:null},"Expresi\xf3n que se eval\xfaa como verdadera o falsa")))),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"Un ",(0,r.kt)("strong",{parentName:"p"},"programa")," tiene un punto de partida, desde ah\xed, comenzar\xe1 su ejecuci\xf3n y continuar\xe1 secuencialmente, una l\xednea a la vez, hasta que se alcance el final del programa. Este es el flujo normal de un programa, ",(0,r.kt)("strong",{parentName:"p"},"secuencial"),". \\\nA la hora de programar, vamos a encontrar situaciones en las que debemos, por ejemplo, decidir ir por un camino u otro en base a una situaci\xf3n dada, o ejecutar una instrucci\xf3n m\xe1s de una vez. Ac\xe1 es donde entran las ",(0,r.kt)("em",{parentName:"p"},"estructuras de control"),". "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Las ",(0,r.kt)("strong",{parentName:"p"},"estructuras de control")," permiten controlar el flujo de un programa realizando saltos, bifurcaciones o iteraciones. En otras palabras, nos permiten decidir c\xf3mo ser\xe1 el flujo del programa. ")),(0,r.kt)("p",null,"Veremos dos tipos de estructuras de control (adem\xe1s de la secuencial):"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Iterativa"),": permiten ejecutar una instrucci\xf3n m\xe1s de una vez."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Selectiva"),": permiten tomar decisiones, es decir, realizar una acci\xf3n u otra/s.")),(0,r.kt)("h2",{id:"estructuras-de-control-selectivas"},"Estructuras de control selectivas"),(0,r.kt)("p",null,"Estas estructuras de control permiten alterar el flujo normal del programa seg\xfan se cumpla o no una determinada condici\xf3n. Las estructuras de control selectivas que veremos son:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if...else")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if...else if...else")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"switch"))),(0,r.kt)("h3",{id:"if"},"if"),(0,r.kt)("p",null,"La sentencia ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," eval\xfaa la expresi\xf3n dentro del par\xe9ntesis. Si la expresi\xf3n es verdadera, se ejecutan las declaraciones dentro del cuerpo de ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),". Si la expresi\xf3n es falsa, no se ejecutan.\nLa expresi\xf3n necesariamente tiene que ser una ",(0,r.kt)("strong",{parentName:"p"},"expresi\xf3n booleana"),". Esto vale para cualquier expresi\xf3n que deba ser evaluada por una estructura de control a excepci\xf3n del ",(0,r.kt)("inlineCode",{parentName:"p"},"switch"),", la cual mencionaremos m\xe1s adelante."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nsi(expresi\xf3n) entonces \n    acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nif(expresi\xf3n) {\n    // acci\xf3n/es\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Pyhton\nif expresi\xf3n:           \n   # acci\xf3n/es\n")),(0,r.kt)("h3",{id:"ifelse"},"if...else"),(0,r.kt)("p",null,"La sentencia ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," puede tener un bloque ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," opcional. En el caso de que la expresi\xf3n del ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," eval\xfae como falsa, se ejecutar\xe1 el bloque ",(0,r.kt)("inlineCode",{parentName:"p"},"else"),". Ser\xeda el caso por defecto."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nsi(expresi\xf3n) entonces \n    acci\xf3n/es\nsino \n    acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nif(expresi\xf3n) {\n    // acci\xf3n/es\n}\nelse {\n    // acci\xf3n/es\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Pyhton\nif expresi\xf3n:           \n   # acci\xf3n/es\nelse:\n    # acci\xf3n/es\n")),(0,r.kt)("h3",{id:"escalera-ifelse"},"Escalera if...else"),(0,r.kt)("p",null,"En ocasiones, vamos a necesitar evaluar m\xe1s de uno o dos casos. Para eso esta la escalera ",(0,r.kt)("inlineCode",{parentName:"p"},"if...else"),", que permite evaluar m\xfaltiples expresiones (cuantas queramos). A esta estructura tambi\xe9n se la conoce como ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," m\xfaltiple.\n",(0,r.kt)("strong",{parentName:"p"},"Se ejecutar\xe1 \xfanicamente el bloque que eval\xfae la expresi\xf3n como verdadera.")," Esto quiere decir que, si alguna de las expresiones es verdadera, entonces se saltearan el resto de las evaluaciones que siguen, si las hay (recordar que el bloque ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," es opcional)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nsi(expresi\xf3n) entonces \n    acci\xf3n/es\nsino(expresi\xf3n) entonces\n    acci\xf3n/es\n...\nsino(expresi\xf3n) entonces\n    acci\xf3n/es\nsino \n    acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nif(expresi\xf3n) {\n    // acci\xf3n/es\n}\nelse if(expresi\xf3n) {\n    // acci\xf3n/es\n}\n...\nelse if(expresi\xf3n) {\n    // acci\xf3n/es\n}\nelse {\n    acci\xf3n/es\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Pyhton\nif expresi\xf3n:           \n   # acci\xf3n/es\nelif expresi\xf3n:\n    # acci\xf3n/es\n...\nelif expresi\xf3n:\n    # acci\xf3n/es\nelse:\n    # acci\xf3n/es\n")),(0,r.kt)("h3",{id:"if-anidado"},"if anidado"),(0,r.kt)("p",null,"Es legal incluir dentro de cualquier bloque ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"else if")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," otra estructura de las vistas anteriormente. Veamos un ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nsi(expresi\xf3n) entonces \n    si(expresi\xf3n) entonces \n        acci\xf3n/es\n    sino\n        acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nif(expresi\xf3n) {\n    if(expresi\xf3n) {\n        // acci\xf3n/es\n    }\n    else {\n        // acci\xf3n/es\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"if expresi\xf3n:\n    if expresi\xf3n:\n        acci\xf3n/es\n    else:\n        acci\xf3n/es\n")),(0,r.kt)("h3",{id:"switchcase"},"switch...case"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"switch case")," nos permite ejecutar una acci\xf3n o un bloque de c\xf3digo en base a distintas alternativas, llamadas ",(0,r.kt)("strong",{parentName:"p"},"casos"),". El valor de la variable a evaluar es comparado con los distintos casos, cuando el valor de la misma coincide con una de las ",(0,r.kt)("strong",{parentName:"p"},"etiquetas")," (valores posibles de la variable), se ejecuta el bloque de c\xf3digo despu\xe9s de la etiqueta coincidente. Si no hay coincidencia, se ejecuta la declaraci\xf3n por defecto."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nseg\xfan(variable)\n    caso etiqueta:\n        acci\xf3n/es\n    ...\n    caso etiqueta:\n        acci\xf3n/es\n    defecto:\n        acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nswitch(variable){\n    case etiqueta:\n        // acci\xf3n/es\n        break;\n    ...\n    case etiqueta:\n        // acci\xf3n/es\n        break;\n    default:\n        // acci\xf3n/es\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Python\n# No existe esta estructura en Python\n")),(0,r.kt)("p",null,"Qu\xe9 debemos tener en cuenta a la hora de usar ",(0,r.kt)("inlineCode",{parentName:"p"},"switch case"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Cada caso, excepto el caso por defecto, debe usar ",(0,r.kt)("inlineCode",{parentName:"li"},"break"),". Si no usamos ",(0,r.kt)("inlineCode",{parentName:"li"},"break"),", se ejecutan todas las declaraciones despu\xe9s de la etiqueta coincidente. Lo que hace ",(0,r.kt)("inlineCode",{parentName:"li"},"break"),", es cortar la ejecuci\xf3n del ",(0,r.kt)("inlineCode",{parentName:"li"},"switch case"),"."),(0,r.kt)("li",{parentName:"ul"},"El caso por defecto es opcional y en caso de usarlo, debe ir a lo \xfaltimo."),(0,r.kt)("li",{parentName:"ul"},"Puede haber como m\xe1ximo una declaraci\xf3n por defecto."),(0,r.kt)("li",{parentName:"ul"},"No se permiten etiquetas duplicadas."),(0,r.kt)("li",{parentName:"ul"},"El valor de una etiqueta debe ser una constante o un literal (declaradas con ",(0,r.kt)("inlineCode",{parentName:"li"},"#define"),"). No se permiten variables."),(0,r.kt)("li",{parentName:"ul"},"El valor de una etiqueta debe ser del mismo tipo de dato que el de la variable.")),(0,r.kt)("p",null,"Se utiliza en lugar de una escalera ",(0,r.kt)("inlineCode",{parentName:"p"},"if else")," cuando dicha estructura comienza a perder claridad al realizar reiteradamente la misma consulta. Por lo tanto, en ese caso, es mejor pr\xe1ctica usar ",(0,r.kt)("inlineCode",{parentName:"p"},"switch case")," por una cuesti\xf3n de legibilidad (en otras palabras, queda m\xe1s limpio)."),(0,r.kt)("h2",{id:"estructuras-de-control-iterativas"},"Estructuras de control iterativas"),(0,r.kt)("p",null,"Estas estructuras de control permiten repetir una acci\xf3n o un bloque de c\xf3digo seg\xfan se cumpla o no, o mientras se cumpla, una determinada condici\xf3n. Las estructuras de control iterativas que veremos son:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"while")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"do while")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"for"))),(0,r.kt)("p",null,"Con este tipo de estructuras hay que ser cuidadoso con los ",(0,r.kt)("strong",{parentName:"p"},"bucles infinitos"),". Esto ocurre cuando la condici\xf3n que finalizar\xeda el mismo, nunca deja de cumplirse. Se entender\xe1 mejor luego de ver las distintas estructuras."),(0,r.kt)("h3",{id:"while-loop"},"while loop"),(0,r.kt)("p",null,"Esta estructura repite una acci\xf3n o bloque de c\xf3digo ",(0,r.kt)("strong",{parentName:"p"},"mientras")," que el resultado de la evaluaci\xf3n de la expresi\xf3n sea verdadero, la cual se realiza antes de la ejecuci\xf3n del bloque. Cuando la expresi\xf3n resulte falsa, terminar\xe1 la ejecuci\xf3n del bucle. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nmientras(expresi\xf3n) hacer\n    acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nwhile(expresi\xf3n) {\n    // acci\xf3n/es\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Python\nwhile expresi\xf3n:\n    # acci\xf3n/es\n")),(0,r.kt)("p",null,"Supongamos que queremos realizar un bucle de 10 iteraciones. Tendr\xedamos la siguiente condici\xf3n: ",(0,r.kt)("inlineCode",{parentName:"p"},"n < 10"),", donde ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," es una variable que acumula la cantidad de iteraciones realizadas inicializada en 0. Esto quiere decir, que cuando ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," alcance valor 10, terminar\xe1 la ejecuci\xf3n del ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),". Para no entrar en un bucle infinito, no solo debemos asegurarnos de que la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," este inicializada, si no que debemos tener una actualizaci\xf3n al final del bloque ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),". Veamos el ejemplo en c\xf3digo a continuaci\xf3n:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nint n = 0;\nwhile(n < 10) {\n    // acci\xf3n/es\n    n++; \n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Python\nn = 0\nwhile n < 10:\n    # acci\xf3n/es\n    n += 1\n")),(0,r.kt)("h3",{id:"dowhile-loop"},"do...while loop"),(0,r.kt)("p",null,"Esta estructura iterativa es similar a la anterior. La \xfanica diferencia es que la expresi\xf3n la eval\xfaa luego de ejecutar la acci\xf3n o el bloque de c\xf3digo. Esto quiere decir que va a ejecutar la acci\xf3n o el bloque ",(0,r.kt)("strong",{parentName:"p"},"al menos una vez"),", lo cual puede llegar a ser muy \xfatil. A continuaci\xf3n, se muestra la sintaxis de esta estructura:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\nrepetir\n    acci\xf3n/es\nmientras(!expresi\xf3n) \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\ndo {\n    // acci\xf3n/es\n} while(expresi\xf3n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Python\n# No existe esta estructura en Python\n")),(0,r.kt)("h3",{id:"for-loop"},"for loop"),(0,r.kt)("p",null,"Esta estructura de control ",(0,r.kt)("strong",{parentName:"p"},"se utiliza cuando se conoce la cantidad de iteraciones previamente")," y esta cantidad es un n\xfamero finito de repeticiones."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Pseudoc\xf3digo\npara(inicializaci\xf3n; expresi\xf3n; actualizaci\xf3n)\n    acci\xf3n/es\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// C, Java, C++\nfor(int i = 0; i < cantidad; i++) {\n    // acci\xf3n/es\n}\n")),(0,r.kt)("p",null,"En Java, adem\xe1s del mostrado arriba, hay un loop m\xe1s llamado ",(0,r.kt)("inlineCode",{parentName:"p"},"for each"),", que nos permite iterar sobre un conjunto de valores (similar al ",(0,r.kt)("inlineCode",{parentName:"p"},"for x in conjunto")," de python):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"for(tipo variable: conjunto) {\n  // acci\xf3n/es\n}\n")),(0,r.kt)("p",null,"En Python hay dos ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Python\n# Para iterar sobre un conjunto de valores\nfor x in conjunto:\n    # acci\xf3n/es\n# Para iterar una determinada cantidad de veces (el inicio es opcional, empieza en 0 por defecto)\nfor x in range(inicio, fin):\n    # acci\xf3n/es\n")))}p.isMDXComponent=!0}}]);